{"version":3,"sources":["stackframe.js","stacktrace-gps.js"],"names":["root","factory","define","amd","exports","module","StackFrame","this","_isNumber","n","isNaN","parseFloat","isFinite","functionName","args","fileName","lineNumber","columnNumber","source","undefined","setFunctionName","setArgs","setFileName","setLineNumber","setColumnNumber","setSource","prototype","getFunctionName","v","String","getArgs","Object","toString","call","TypeError","getFileName","getLineNumber","Number","getColumnNumber","getSource","join","require","StackTraceGPS","SourceMap","_xdr","url","Promise","resolve","reject","req","XMLHttpRequest","open","onerror","onreadystatechange","readyState","status","responseText","Error","send","_findFunctionName","line","m","commentPos","reFunctionDeclaration","reFunctionExpression","reFunctionEvaluation","lines","split","code","maxLines","Math","min","i","indexOf","substr","exec","_ensureSupportedEnvironment","defineProperty","create","_ensureStackFrameIsLegit","stackframe","_findSourceMappingURL","_extractLocationInfoFromSourceMap","rawSourceMap","sourceCache","mapConsumer","SourceMapConsumer","loc","originalPositionFor","column","mappedSource","sourceContentFor","name","opts","ajax","_get","location","isDataUrl","offline","supportedEncoding","length","sourceMapStart","encodedSource","window","atob","xhrPromise","method","then","bind","pinpoint","getMappedLocation","mappedStackFrame","resolveMappedStackFrame","findFunctionName","guessedFunctionName","sourceMappingURL","substring","lastIndexOf","map"],"mappings":"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","file":"stacktrace-gps.min.js","sourcesContent":["(function (root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('stackframe', [], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.StackFrame = factory();\n    }\n}(this, function () {\n    'use strict';\n    function _isNumber(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n\n    function StackFrame(functionName, args, fileName, lineNumber, columnNumber, source) {\n        if (functionName !== undefined) {\n            this.setFunctionName(functionName);\n        }\n        if (args !== undefined) {\n            this.setArgs(args);\n        }\n        if (fileName !== undefined) {\n            this.setFileName(fileName);\n        }\n        if (lineNumber !== undefined) {\n            this.setLineNumber(lineNumber);\n        }\n        if (columnNumber !== undefined) {\n            this.setColumnNumber(columnNumber);\n        }\n        if (source !== undefined) {\n            this.setSource(source);\n        }\n    }\n\n    StackFrame.prototype = {\n        getFunctionName: function () {\n            return this.functionName;\n        },\n        setFunctionName: function (v) {\n            this.functionName = String(v);\n        },\n\n        getArgs: function () {\n            return this.args;\n        },\n        setArgs: function (v) {\n            if (Object.prototype.toString.call(v) !== '[object Array]') {\n                throw new TypeError('Args must be an Array');\n            }\n            this.args = v;\n        },\n\n        // NOTE: Property name may be misleading as it includes the path,\n        // but it somewhat mirrors V8's JavaScriptStackTraceApi\n        // https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi and Gecko's\n        // http://mxr.mozilla.org/mozilla-central/source/xpcom/base/nsIException.idl#14\n        getFileName: function () {\n            return this.fileName;\n        },\n        setFileName: function (v) {\n            this.fileName = String(v);\n        },\n\n        getLineNumber: function () {\n            return this.lineNumber;\n        },\n        setLineNumber: function (v) {\n            if (!_isNumber(v)) {\n                throw new TypeError('Line Number must be a Number');\n            }\n            this.lineNumber = Number(v);\n        },\n\n        getColumnNumber: function () {\n            return this.columnNumber;\n        },\n        setColumnNumber: function (v) {\n            if (!_isNumber(v)) {\n                throw new TypeError('Column Number must be a Number');\n            }\n            this.columnNumber = Number(v);\n        },\n\n        getSource: function () {\n            return this.source;\n        },\n        setSource: function (v) {\n            this.source = String(v);\n        },\n\n        toString: function() {\n            var functionName = this.getFunctionName() || '{anonymous}';\n            var args = '(' + (this.getArgs() || []).join(',') + ')';\n            var fileName = this.getFileName() ? ('@' + this.getFileName()) : '';\n            var lineNumber = _isNumber(this.getLineNumber()) ? (':' + this.getLineNumber()) : '';\n            var columnNumber = _isNumber(this.getColumnNumber()) ? (':' + this.getColumnNumber()) : '';\n            return functionName + args + fileName + lineNumber + columnNumber;\n        }\n    };\n\n    return StackFrame;\n}));\n","(function (root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('stacktrace-gps', ['source-map', 'stackframe'], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('source-map/lib/source-map-consumer'), require('stackframe'));\n    } else {\n        root.StackTraceGPS = factory(root.SourceMap, root.StackFrame);\n    }\n}(this, function (SourceMap, StackFrame) {\n    'use strict';\n\n    /**\n     * Make a X-Domain request to url and callback.\n     *\n     * @param url [String]\n     * @return Promise with response text if fulfilled\n     */\n    function _xdr(url) {\n        return new Promise(function (resolve, reject) {\n            var req = new XMLHttpRequest();\n            req.open('get', url);\n            req.onerror = reject;\n            req.onreadystatechange = function onreadystatechange() {\n                if (req.readyState === 4) {\n                    if (req.status >= 200 && req.status < 300) {\n                        resolve(req.responseText);\n                    } else {\n                        reject(new Error('HTTP status: ' + req.status + ' retrieving ' + url));\n                    }\n                }\n            };\n            req.send();\n        });\n\n    }\n\n    function _findFunctionName(source, lineNumber, columnNumber) {\n        // function {name}({args}) m[1]=name m[2]=args\n        var reFunctionDeclaration = /function\\s+([^(]*?)\\s*\\(([^)]*)\\)/;\n        // {name} = function ({args}) TODO args capture\n        var reFunctionExpression = /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*function\\b/;\n        // {name} = eval()\n        var reFunctionEvaluation = /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*(?:eval|new Function)\\b/;\n        var lines = source.split('\\n');\n\n        // Walk backwards in the source lines until we find the line which matches one of the patterns above\n        var code = '', line, maxLines = Math.min(lineNumber, 20), m, commentPos;\n        for (var i = 0; i < maxLines; ++i) {\n            // lineNo is 1-based, source[] is 0-based\n            line = lines[lineNumber - i - 1];\n            commentPos = line.indexOf('//');\n            if (commentPos >= 0) {\n                line = line.substr(0, commentPos);\n            }\n\n            if (line) {\n                code = line + code;\n                m = reFunctionExpression.exec(code);\n                if (m && m[1]) {\n                    return m[1];\n                }\n                m = reFunctionDeclaration.exec(code);\n                if (m && m[1]) {\n                    return m[1];\n                }\n                m = reFunctionEvaluation.exec(code);\n                if (m && m[1]) {\n                    return m[1];\n                }\n            }\n        }\n        return undefined;\n    }\n\n    function _ensureSupportedEnvironment() {\n        if (typeof Object.defineProperty !== 'function' || typeof Object.create !== 'function') {\n            throw new Error('Unable to consume source maps in older browsers');\n        }\n    }\n\n    function _ensureStackFrameIsLegit(stackframe) {\n        if (typeof stackframe !== 'object') {\n            throw new TypeError('Given StackFrame is not an object');\n        } else if (typeof stackframe.fileName !== 'string') {\n            throw new TypeError('Given file name is not a String');\n        } else if (typeof stackframe.lineNumber !== 'number' || stackframe.lineNumber % 1 !== 0 || stackframe.lineNumber < 1) {\n            throw new TypeError('Given line number must be a positive integer');\n        } else if (typeof stackframe.columnNumber !== 'number' || stackframe.columnNumber % 1 !== 0 || stackframe.columnNumber < 0) {\n            throw new TypeError('Given column number must be a non-negative integer');\n        }\n        return true;\n    }\n\n    function _findSourceMappingURL(source) {\n        var m = /\\/\\/[#@] ?sourceMappingURL=([^\\s'\"]+)\\s*$/.exec(source);\n        if (m && m[1]) {\n            return m[1];\n        } else {\n            throw new Error('sourceMappingURL not found');\n        }\n    }\n\n    function _extractLocationInfoFromSourceMap(rawSourceMap, args, lineNumber, columnNumber, sourceCache) {\n        var mapConsumer = new SourceMap.SourceMapConsumer(rawSourceMap);\n\n        var loc = mapConsumer.originalPositionFor({\n            line: lineNumber,\n            column: columnNumber\n        });\n\n        var mappedSource = mapConsumer.sourceContentFor(loc.source);\n        if (mappedSource) {\n            sourceCache[loc.source] = mappedSource;\n        }\n\n        return new StackFrame(loc.name, args, loc.source, loc.line, loc.column);\n    }\n\n    /**\n     * @param opts: [Object] options.\n     *      opts.sourceCache = {url: \"Source String\"} => preload source cache\n     *      opts.offline = True to prevent network requests.\n     *              Best effort without sources or source maps.\n     */\n    return function StackTraceGPS(opts) {\n        if (!(this instanceof StackTraceGPS)) {\n            return new StackTraceGPS(opts);\n        }\n        opts = opts || {};\n\n        this.sourceCache = opts.sourceCache || {};\n\n        this.ajax = _xdr;\n\n        this._get = function _get(location) {\n            return new Promise(function (resolve, reject) {\n                var isDataUrl = location.substr(0, 5) === 'data:';\n                if (this.sourceCache[location]) {\n                    resolve(this.sourceCache[location]);\n                } else if (opts.offline && !isDataUrl) {\n                    reject(new Error('Cannot make network requests in offline mode'));\n                } else {\n                    if (isDataUrl) {\n                        var supportedEncoding = 'application/json;base64';\n                        if (location.substr(5, supportedEncoding.length) !== supportedEncoding) {\n                            reject(new Error('The encoding of the inline sourcemap is not supported'));\n                        } else {\n                            var sourceMapStart = 'data:'.length + supportedEncoding.length + ','.length;\n                            var encodedSource = location.substr(sourceMapStart);\n                            var source = window.atob(encodedSource);\n                            this.sourceCache[location] = source;\n                            resolve(source);\n                        }\n                    } else {\n                        var xhrPromise = this.ajax(location, {method: 'get'});\n                        // Cache the Promise to prevent duplicate in-flight requests\n                        this.sourceCache[location] = xhrPromise;\n                        xhrPromise.then(resolve, reject);\n                    }\n                }\n            }.bind(this));\n        };\n\n        /**\n         * Given a StackFrame, enhance function name and use source maps for a\n         * better StackFrame.\n         *\n         * @param stackframe - {StackFrame}-like object\n         *      {fileName: 'path/to/file.js', lineNumber: 100, columnNumber: 5}\n         * @return StackFrame with source-mapped location\n         */\n        this.pinpoint = function StackTraceGPS$$pinpoint(stackframe) {\n            return new Promise(function (resolve, reject) {\n                this.getMappedLocation(stackframe).then(function (mappedStackFrame) {\n                    function resolveMappedStackFrame() {\n                        resolve(mappedStackFrame);\n                    }\n\n                    this.findFunctionName(mappedStackFrame)\n                        .then(resolve, resolveMappedStackFrame)\n                        ['catch'](resolveMappedStackFrame);\n                }.bind(this), reject);\n            }.bind(this));\n        };\n\n        /**\n         * Given a StackFrame, guess function name from location information.\n         *\n         * @param stackframe - {StackFrame}-like object\n         *      {fileName: 'path/to/file.js', lineNumber: 100, columnNumber: 5}\n         * @return StackFrame with guessed function name\n         */\n        this.findFunctionName = function StackTraceGPS$$findFunctionName(stackframe) {\n            return new Promise(function (resolve, reject) {\n                _ensureStackFrameIsLegit(stackframe);\n                this._get(stackframe.fileName).then(function getSourceCallback(source) {\n                    var guessedFunctionName = _findFunctionName(source, stackframe.lineNumber, stackframe.columnNumber);\n                    resolve(new StackFrame(guessedFunctionName, stackframe.args, stackframe.fileName, stackframe.lineNumber, stackframe.columnNumber));\n                }, reject)['catch'](reject);\n            }.bind(this));\n        };\n\n        /**\n         * Given a StackFrame, seek source-mapped location and return new enhanced StackFrame.\n         *\n         * @param stackframe - {StackFrame}-like object\n         *      {fileName: 'path/to/file.js', lineNumber: 100, columnNumber: 5}\n         * @return StackFrame with source-mapped location\n         */\n        this.getMappedLocation = function StackTraceGPS$$getMappedLocation(stackframe) {\n            return new Promise(function (resolve, reject) {\n                _ensureSupportedEnvironment();\n                _ensureStackFrameIsLegit(stackframe);\n\n                var sourceCache = this.sourceCache;\n                var fileName = stackframe.fileName;\n                this._get(fileName).then(function (source) {\n                    var sourceMappingURL = _findSourceMappingURL(source);\n                    var isDataUrl = sourceMappingURL.substr(0, 5) === 'data:';\n\n                    if (sourceMappingURL[0] !== '/' && !isDataUrl) {\n                        sourceMappingURL = fileName.substring(0, fileName.lastIndexOf('/') + 1) + sourceMappingURL;\n                    }\n\n                    this._get(sourceMappingURL).then(function (map) {\n                        var lineNumber = stackframe.lineNumber;\n                        var columnNumber = stackframe.columnNumber;\n                        resolve(_extractLocationInfoFromSourceMap(map, stackframe.args, lineNumber, columnNumber, sourceCache));\n                    }, reject)['catch'](reject);\n                }.bind(this), reject)['catch'](reject);\n            }.bind(this));\n        };\n    };\n}));\n"],"sourceRoot":"/source/"}